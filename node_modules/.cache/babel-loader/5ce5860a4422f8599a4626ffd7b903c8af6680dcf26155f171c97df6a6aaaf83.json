{"ast":null,"code":"var _jsxFileName = \"/Users/drashtipatel/Desktop/projectexpl/frontend/src/components/ProtectedRoute.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  const user = JSON.parse(localStorage.getItem('user')); // assuming user object is stored after login\n\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this); // redirect to login if not logged in\n  }\n  return children; // allow all roles to access\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","user","JSON","parse","localStorage","getItem","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/drashtipatel/Desktop/projectexpl/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\n\nconst ProtectedRoute = ({ children }) => {\n  const user = JSON.parse(localStorage.getItem('user')); // assuming user object is stored after login\n\n  if (!user) {\n    return <Navigate to=\"/\" />; // redirect to login if not logged in\n  }\n\n  return children; // allow all roles to access\n};\n\nexport default ProtectedRoute;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACvC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEvD,IAAI,CAACJ,IAAI,EAAE;IACT,oBAAOH,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EAC9B;EAEA,OAAOV,QAAQ,CAAC,CAAC;AACnB,CAAC;AAACW,EAAA,GARIZ,cAAc;AAUpB,eAAeA,cAAc;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}